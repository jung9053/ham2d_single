#include <stdio.h>
#include <math.h>
#include "ham2dtypes.h"
#include "ham2dFunctionDefs.h"


void computeRHS(GRID *g,SOLN *s,double *l2rho)
{
  //
  int i,j,k,m,f,n;
  int f1,f2;
  int is,ie;
  int iface;
  int idv;
  int chainSize;
  double ds[3];
  double leftState[NVAR];
  double rightState[NVAR];
  double leftState0[NVAR];
  double rightState0[NVAR];
  double consVar[NVAR];
//  double flux[NVAR];
  double gm1=gamm-1.0;
  double gamma1=gamm;
//  double specRadius;
  double faceVel=0.;
  double dsnorm,nynx,nx2ny;
  double rhoi;
  int node1,node2,node3,node4,leftCell,rightCell,icell;
  double x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4;  
  double xa,ya,za,xb,yb,zb;
  double pp;
  double th,qt,eps;
  double dscheck[2];
  int iflag;


  int n1,n2,n3,n4,n5,n6,n7,n8;
  double xc,yc,zc;

  //
  // zero out residual and spectral radii
  //
  dscheck[0]=dscheck[1]=0;
  for(i=0;i<NVAR*g->ncells;i++) s->r[i]=0.0;
  for(i=0;i<g->ncells;i++) s->sigma[i]=0.0;
  //
  // one loop per chain to evaluate fluxes
  // on all the faces in the chain
  //

  for(i=0;i<g->nchains;i++)
    {
      iflag = 0;

      f1=g->faceStartPerChain[i];
      f2=g->faceStartPerChain[i+1];
      m=2;

      for(f=f1;f<f2;f++)
	{
	  iface=g->chainConn[f]; //iface = face index
	  g->cindx[m]=g->faces[8*iface+4]; //cindx = cell index
	  m++;
	}
      
       
      //
      // add buffer cells to the chain
      //
      if (g->chainConn[f1]==g->chainConn[f2-1])
	{
          iflag = 0;

	  //
	  // this is a closed chain
	  // make it periodic
	  //
	  f=f1+1;
	  iface=g->chainConn[f];
	  g->cindx[m]=g->faces[8*iface+4];
	  chainSize=m;
	  m=0;
	  for(f=f2-3;f<f2-1;f++)
	    {
	      iface=g->chainConn[f];
	      g->cindx[m]=g->faces[8*iface+4];
	      m++;
	    }
	}
      else
	{
          iflag = 1;
	  //
	  // this is a open chain
	  // -ve index indicates necessity to create
	  // ghost cells
	  //
          // solid bc 
          if(g->test == 0){
	  m--;
	  g->cindx[m]=-g->cindx[m];
	  m++;
	  g->cindx[m]=-g->cindx[m-3];
	  chainSize=m+1;
	  m=0;
	  g->cindx[m]=-g->cindx[m+3];
	  m=1;
	  g->cindx[m]=-g->cindx[m+1];
          }         
 
          // periodic bc
          if(g->test==1) apply_periodic(&g[0],f1,f2, m);
          chainSize=m+1;
        }
//============ print for verification===========	
//    if(iflag==1) //open chain 
//    {
//
//    printf("i:%d Stopping code\n",i);
//    printf("chain size=%d\n",chainSize);
//
//    for(k=0;k<=chainSize-1;k++) 
//    {
//    printf("cell index:%d\n",g->cindx[k]);  
//    }
//    exit(1); 
//    }
//============================================



//============================================
      for(j=0;j<chainSize;j++)
	{
	  icell=g->cindx[j];
	  if (icell >=0) 
	    {
	      m=NVAR*icell;
	      for(k=0;k<NVAR;k++)
		{
		  consVar[k]=s->q[m]; // conservative variables : rho, rho*u, rho*e
		  m++;
		}
	      rhoi=1./consVar[0];
	      g->f[j][0]=consVar[0];
	      g->f[j][1]=consVar[1];
	      g->f[j][2]=consVar[2];
	      g->f[j][3]=consVar[3];
	      g->f[j][4]=consVar[4];

	    }
	  else
	    {
	      //
	      // do ghost cells
	      // based on whether they are on the solid boundary on that
	      if (j < 2) //0,1
		{
		  iface=g->chainConn[f1];
		}
	      else // last
		{
		  iface=g->chainConn[f2-1];
		}
	      rightCell=g->faces[8*iface+6];
	     
              // this is for surface bc, so variables are projected
	      if (rightCell==-2)  /* this is a face on solid wall */ 
		{
		  node1=g->faces[8*iface];
		  node2=g->faces[8*iface+1];
        node3=g->faces[8*iface+2];
        node4=g->faces[8*iface+3];
		  
		  x1=g->x[3*node1];
		  y1=g->x[3*node1+1];
		  z1=g->x[3*node1+2];

		  x2=g->x[3*node2];
		  y2=g->x[3*node2+1];
		  z2=g->x[3*node2+2];

        x3=g->x[3*node3];
		  y3=g->x[3*node3+1];
		  z3=g->x[3*node3+2];

		  x4=g->x[3*node4];
		  y4=g->x[3*node4+1];
		  z4=g->x[3*node4+2];
 
   
        // 3D face normal vector (direction?)
        xa = x1 - x3; xb = x2 - x4;
        ya = y1 - y3; yb = y2 - y4;
        za = z1 - z3; zb = z2 - z4;


        ds[0] = 0.5*(za*yb - ya*zb);
        ds[1] = 0.5*(xa*zb - za*xb);
        ds[2] = 0.5*(ya*xb - xa*yb);
 
                  // 2d
//		  ds[0]=(y2-y1);
//		  ds[1]=-(x2-x1);

		  icell=-icell;
		  m=NVAR*icell;
		  for(k=0;k<NVAR;k++)
		    {
		      consVar[k]=s->q[m];
		      m++;
		    }

		  dsnorm=ds[0]*ds[0]+ds[1]*ds[1]+ds[2]*ds[2];

        // 2D case ... need to be fixed
        printf("solid wall condition,need to be implemented(3D)\n");
        exit(1);

		  nynx=ds[0]*ds[1]/dsnorm; //x-unit normal vector * y-unit normal vector
		  nx2ny=(ds[0]*ds[0]-ds[1]*ds[1])/dsnorm;

		  rhoi=1./consVar[0];
		 // which fomular is in ?....is it variables? flux?
		  g->f[j][0]=consVar[0];
		  g->f[j][1]=(-consVar[1]*nx2ny-2*consVar[2]*nynx);
		  g->f[j][2]=(consVar[2]*nx2ny-2*consVar[1]*nynx);
                  g->f[j][3]=consVar[3];        
		  g->f[j][4]=consVar[4];		  		  


                  // 2D case ... need to be fixed


		}
	      else // this is for far field b.c, so constant variabls 
		{
        if(g->test==0){
		  g->f[j][0]=rinf;
		  g->f[j][1]=rinf*s->uinf;
		  g->f[j][2]=rinf*s->vinf;
        g->f[j][3]=rinf*s->winf;
		  g->f[j][4]=pinf/gm1+0.5*rinf*(s->uinf*s->uinf+s->vinf*s->vinf+s->winf*s->winf);
                  }
		}
	    } //icell
	}//chainsize
///////////////////////////////////////////////////////////////////
///////////////end of storing flow varibles ///////////////////////
///////////////////////////////////////////////////////////////////     

      is=1;
      ie=chainSize-1;
      th=1./3;
      qt=0.25;
      if (g->order==1) qt=0.0;
      eps=1e-10;

      //reconstruction for each chain
      muscld(g->f,g->ql,g->qr,g->f2,is,ie,th,qt,eps,chainSize,NVAR);

      n=is;
      idv=(g->chainConn[f1]==g->chainConn[f2-1]);

      //
      for(f=f1;f<f2-idv;f++)
	{
	  iface=g->chainConn[f];
	  node1=g->faces[8*iface];
	  node2=g->faces[8*iface+1];
	  node3=g->faces[8*iface+2];
	  node4=g->faces[8*iface+3];

	  leftCell=g->faces[8*iface+4];
	  rightCell=g->faces[8*iface+6];
	  
          // 2D case
//	  ds[0]=(y2-y1);
//	  ds[1]=-(x2-x1);
 
          //3D case
	  x1=g->x[3*node1];
	  y1=g->x[3*node1+1];
	  z1=g->x[3*node1+2];

	  x2=g->x[3*node2];
	  y2=g->x[3*node2+1];
	  z2=g->x[3*node2+2];

     x3=g->x[3*node3];
	  y3=g->x[3*node3+1];
	  z3=g->x[3*node3+2];

	  x4=g->x[3*node4];
	  y4=g->x[3*node4+1];
	  z4=g->x[3*node4+2];
   
          
     // 3D face normal vector (direction?)
     xa = x3 - x1; xb = x2 - x4;
     ya = y3 - y1; yb = y2 - y4;
     za = z3 - z1; zb = z2 - z4;
     ds[0] = 0.5*(za*yb - ya*zb);
     ds[1] = 0.5*(xa*zb - za*xb);
     ds[2] = 0.5*(ya*xb - xa*yb);

	  for(m=0;m<NVAR;m++)
	    {
	      if (f==f2-idv-1 && idv==0) 
		{
		  leftState[m]=g->ql[n][m];
		  rightState[m]=g->qr[n+1][m];
		}
	      else
		{
		  leftState[m]=g->qr[n+1][m];
		  rightState[m]=g->ql[n][m];
		}	      
	      leftState0[m]=s->q[NVAR*leftCell+m]; //g->ql[j][m];	            
//	      if (rightCell > -1) 
//		{
		  rightState0[m]=s->q[NVAR*rightCell+m]; //g->qr[j+1][m];
//		}
	      
	    }
	  
          if (rightCell==-1) {
           if(g->test==0){
	        rightState0[0]=rinf;
	        rightState0[1]=rinf*s->uinf;
           rightState0[2]=rinf*s->vinf;
           rightState0[3]=rinf*s->winf;
           rightState0[4]=pinf/gm1+0.5*rinf*(s->uinf*s->uinf+
                               s->vinf*s->vinf+s->winf*s->winf);
             }
          }
	  else if (rightCell==-2) {
           printf("solid wall condition, need to be implemented(3D)\n");
           exit(1);

	    dsnorm=ds[0]*ds[0]+ds[1]*ds[1];
	    nynx=ds[0]*ds[1]/dsnorm;
	    nx2ny=(ds[0]*ds[0]-ds[1]*ds[1])/dsnorm;
	    rightState0[0]=leftState0[0];
	    rightState0[1]=-leftState0[1]*nx2ny-2*leftState0[2]*nynx;
	    rightState0[2]=leftState0[2]*nx2ny-2*leftState0[1]*nynx;
	    rightState0[3]=leftState0[3];
	  }
	  
	  if (rightState[1]!=rightState0[1] && 0) {
	    trace(leftCell);
	    trace(rightCell);
            for(k=0;k<chainSize;k++)
              printf("%d %d %.16e\n",k,g->cindx[k],g->f[k][1]);
	    trace(n);
	    tracef(leftState[1]);
	    tracef(leftState0[1]);
	    tracef(rightState[1]);
	    tracef(rightState0[1]);
	    tracef(s->q[leftCell*NVAR+1])
	    trace(i);
            trace(n);
	    trace(f);
	    exit(0);
	  }
	  //
	  //calculat flux at the face (3D case)

          //fortran 
          //flux_roe3d_(ds,leftState,rightState,flux,&specRadius,&gamma1);
          //c language
          flux_roe3d(s,ds,leftState,rightState,s->flx,s->specRadius,gamma1,i);


	  //
	  m=NVAR*leftCell;
	  for(j=0;j<NVAR;j++)
	    {
	      s->r[m]-=s->flx[j]; //residual
	      m++;
	    }
	  s->sigma[leftCell]+=s->specRadius;
	  if (rightCell > -1) 
	    {
	      m=NVAR*rightCell;
	      for(j=0;j<NVAR;j++)
               {
		          s->r[m]+=s->flx[j]; //residual
                m++;
               }
	      s->sigma[rightCell]+=s->specRadius;
	    }
	  n++;   


         //residual check for strand grid
         if(i==5){

//           printf("leftcell:%d,ds[x]:%e, ds[y]:%e, ds[z]:%e,\n",leftCell,ds[0],ds[1],ds[2]);
//           printf("rightcell:%d,ds[x]:%e, ds[y]:%e, ds[z]:%e,\n",rightCell,ds[0],ds[1],ds[2]);


//         m = NVAR*leftCell;
//         printf("leftCell:%d,  res:%e,%e,%e,%e,%e\n",leftCell,s->r[m],s->r[m+1],s->r[m+2],s->r[m+3],s->r[m+4]);
//         m = NVAR*rightCell;
//         printf("rightCell:%d,    res:%e,%e,%e,%e,%e\n",rightCell,s->r[m],s->r[m+1],s->r[m+2],s->r[m+3],s->r[m+4]);
          }

 
	} // f1-f2
    } // nstrand

  *l2rho=0.;
  for(i=0;i<g->ncells;i++)
    {
      if ((*l2rho) < fabs(s->r[5*i])) 
	  {
	    icell=i;
	    *l2rho=fabs(s->r[5*i]);
	  }
    }
  //tracef(s->sigma[0]);
  //trace(icell);
}
      
      
  


